#Primeiro estágio: Instala todas as dependencias
FROM php:7.3.6-fpm-alpine3.9 as builder
#Instala Bash, Vim e MySql Client
RUN apk --update add bash vim mysql-client

#Instala dockerize
RUN apk add --no-cache openssl

ENV DOCKERIZE_VERSION v0.6.1
RUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && tar -C /usr/local/bin -xzvf dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && rm dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz

#Install Compose
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
#Instala as dependências do Laravel
RUN docker-php-ext-install pdo pdo_mysql
WORKDIR /var/www/
RUN rm -rf /var/www/html
#Copia o codigo fonte
COPY ./app /var/www/
RUN ln -s public html
RUN composer install && \
    php artisan key:generate && \
    php artisan cache:clear && \
    chmod -R 775 storage


#Estágio 2: Cria uma imagem limpa e copia o que foi instalado no estágio anterior (builder) para uma imagem PRD ready

FROM php:7.3.6-fpm-alpine3.9
#Instala  MySql Client
RUN apk --update add mysql-client

#Instala as dependências do Laravel
RUN docker-php-ext-install pdo pdo_mysql

WORKDIR /var/www/
RUN rm -rf /var/www/html
#Copia o codigo fonte (e as dependencias instaladas) da imagem builder para o WORKDIR
COPY --from=builder /var/www .

EXPOSE 9000
ENTRYPOINT ["php-fpm"]